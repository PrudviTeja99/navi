#!/bin/bash
# Navi - Omarchy-like interactive package manager for CachyOS
# Features: CamelCase fuzzy menus, sudo upfront, interactive/auto-confirm (-y/-n),
# CLI args, fuzzy package search with preview, and sleep inhibition during updates.

set -e

show_help() {
    cat <<EOF
Navi - Interactive Package Manager Wrapper

Usage:
  navi [ACTION] [SOURCE] [OPTIONS]

Actions:
  Install     Install packages
  Remove      Remove installed packages
  Update      Update all packages (pacman, AUR, Flatpak)

Sources:
  pacman      Use pacman for official repo packages
  paru        Use paru for AUR packages

Options:
  -y, --yes   Auto-confirm all prompts (assume "yes")
  -n, --no    Auto-decline all prompts (assume "no")
  -h, --help  Show this help message and exit

Examples:
  navi                # Start interactive fuzzy menu
  navi install pacman # Install package(s) from official repos
  navi remove paru    # Remove package(s) installed via AUR
  navi update -y      # Update everything without prompts

Notes:
  * If no ACTION or SOURCE is provided, fuzzy menus will guide you.
  * Package descriptions are shown in preview with Ctrl-P toggle.
  * Updates run under systemd-inhibit to prevent sleep/idle.
EOF
    exit 0
}


# --- Step 0: Handle help option ---
for arg in "$@"; do
    case "$arg" in
        -h|--help) show_help ;;
    esac
done

# --- Step 1: Ask for sudo once at the start ---
sudo -v
while true; do sudo -v; sleep 60; done 2>/dev/null &
SUDO_LOOP_PID=$!
trap "kill $SUDO_LOOP_PID" EXIT

# --- Step 2: Check dependencies ---
for cmd in fzf paru pacman; do
    if ! command -v $cmd &>/dev/null; then
        echo "Error: $cmd is required but not installed."
        exit 1
    fi
done

# --- Step 3: Parse -y / -n for auto-confirm ---
AUTO_CONFIRM="ask" # default interactive
for arg in "$@"; do
    case "$arg" in
        -y|--yes) AUTO_CONFIRM="yes" ;;
        -n|--no)  AUTO_CONFIRM="no" ;;
    esac
done

# --- Step 4: Determine action (fuzzy/CamelCase or argument) ---
if [[ "$1" =~ ^(install|remove|update)$ ]]; then
    action="$1"
    action_display="$(tr '[:lower:]' '[:upper:]' <<< ${action:0:1})${action:1}"
else
    action_display=$(printf "Install\nRemove\nUpdate" | fzf --height=40% --reverse --border --prompt="Select action: " --ansi)
    [[ -z "$action_display" ]] && action_display="Install"
    action=$(echo "$action_display" | tr '[:upper:]' '[:lower:]')
fi

# --- Step 5: Determine source (skip for update) ---
if [[ "$action" != "update" ]]; then
    if [[ "$2" =~ ^(pacman|paru)$ ]]; then
        source="$2"
        source_display="$(tr '[:lower:]' '[:upper:]' <<< ${source:0:1})${source:1}"
    else
        source_display=$(printf "Pacman\nParu" | fzf --height=20% --reverse --border --prompt="Select source: " --ansi)
        [[ -z "$source_display" ]] && source_display="Pacman"
        source=$(echo "$source_display" | tr '[:upper:]' '[:lower:]')
    fi
fi

# --- Step 6: Package operation functions ---
pkg_install() {
    local pkgs="$1"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RESET="\e[0m"

    # Trim leading/trailing spaces and trailing newline
    pkgs=$(echo "$pkgs" | xargs)       # removes leading/trailing spaces
    pkgs="${pkgs%$'\n'}"                # removes trailing newline

    if [[ "$AUTO_CONFIRM" == "yes" ]]; then
            if [[ "$source" == "pacman" ]]; then
                sudo pacman -S "$pkgs" --noconfirm
            elif [[ "$source" == "paru" ]]; then
                paru -S "$pkgs" --noconfirm
            fi
        echo -e "${GREEN}Installed: $pkgs${RESET}"
    elif [[ "$AUTO_CONFIRM" == "no" ]]; then
        echo -e "${YELLOW}Skipping installation: $pkgs${RESET}"
    else
        read -rp "Install $pkgs? [y/N]: " ans < /dev/tty
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            if [[ "$source" == "pacman" ]]; then
                sudo pacman -S "$pkgs" --noconfirm
            elif [[ "$source" == "paru" ]]; then
                paru -S "$pkgs" --noconfirm
            fi
            echo -e "${GREEN}Installed: $pkgs${RESET}"
        else
            echo -e "${YELLOW}Skipping installation: $pkgs${RESET}"
        fi
    fi
}

pkg_remove() {
    local pkgs="$1"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RESET="\e[0m"

    # Trim leading/trailing spaces and trailing newline
    pkgs=$(echo "$pkgs" | xargs)       # removes leading/trailing spaces
    pkgs="${pkgs%$'\n'}"                # removes trailing newline

    if [[ "$AUTO_CONFIRM" == "yes" ]]; then
        if [[ "$source" == "pacman" ]]; then
                sudo pacman -Rns "$pkgs" --noconfirm
            elif [[ "$source" == "paru" ]]; then
                paru -Rns "$pkgs" --noconfirm
            fi
        echo -e "${RED}Removed: $pkgs ${RESET}"
    elif [[ "$AUTO_CONFIRM" == "no" ]]; then
        echo -e "${YELLOW}Skipping removal: $pkgs${RESET}"
    else
        read -rp "Remove $pkg? [y/N]: " ans < /dev/tty
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            if [[ "$source" == "pacman" ]]; then
                sudo pacman -Rns "$pkgs" --noconfirm
            elif [[ "$source" == "paru" ]]; then
                paru -Rns "$pkgs" --noconfirm
            fi
            echo -e "${RED}Removed: $pkgs ${RESET}"
        else
            echo -e "${YELLOW}Skipping removal: $pkgs${RESET}"
        fi
    fi
}

update_packages() {
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local RED="\e[31m"
    local RESET="\e[0m"

    # --- Temporarily disable exit-on-error ---
    set +e

    # Fetch available updates
    pacman_updates=$(sudo pacman -Syu)
    aur_updates=$(paru -Sya)
    flatpak_updates=""
    if command -v flatpak &>/dev/null; then
        flatpak_updates=$(flatpak update)
    fi

    set -e
    # --- Re-enable exit-on-error ---

    # Display updates grouped by manager
    if [[ -n "$pacman_updates" ]]; then
        echo -e "\n${GREEN}--- Pacman Packages ---${RESET}"
        echo "$pacman_updates"
    fi
    if [[ -n "$aur_updates" ]]; then
        echo -e "\n${GREEN}--- AUR Packages ---${RESET}"
        echo "$aur_updates"
    fi
    if [[ -n "$flatpak_updates" ]]; then
        echo -e "\n${GREEN}--- Flatpak Packages ---${RESET}"
        echo "$flatpak_updates"
    fi

    # Determine commands based on AUTO_CONFIRM
    local pacman_cmd="sudo pacman -Syu"
    local paru_cmd="paru -Syu"
    local flatpak_cmd="flatpak update"

    if [[ "$AUTO_CONFIRM" == "yes" ]]; then
        pacman_cmd+=" --noconfirm"
        paru_cmd+=" --noconfirm"
        flatpak_cmd+=" -y"
    elif [[ "$AUTO_CONFIRM" == "no" ]]; then
        echo -e "${YELLOW}Skipping all updates${RESET}"
        return
    else
        # ask mode: get confirmation
        read -rp $'\nProceed with updating all packages? [y/N]: ' ans < /dev/tty
        if [[ ! "$ans" =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Skipping all updates.${RESET}"
            return
        fi
        # If user confirmed, add noconfirm flags
        pacman_cmd+=" --noconfirm"
        paru_cmd+=" --noconfirm"
        flatpak_cmd+=" -y"
    fi

    echo -e "${YELLOW}Updating packages (sleep/idle inhibited)...${RESET}"

    # Run updates under systemd-inhibit
    systemd-inhibit --what=handle-lid-switch:sleep:idle --who="navi script" --why="Updating packages" bash -c "
        echo -e '${GREEN}--- Updating Pacman Packages ---${RESET}'
        $pacman_cmd

        echo -e '${GREEN}--- Updating AUR Packages ---${RESET}'
        $paru_cmd

        if command -v flatpak &>/dev/null; then
            echo -e '${GREEN}--- Updating Flatpak Packages ---${RESET}'
            $flatpak_cmd
        else
            echo -e '${YELLOW}Flatpak not installed, skipping...${RESET}'
        fi

        echo -e '${GREEN}All updates completed.${RESET}'
    "
}


# --- Step 7: Run update directly ---
if [[ "$action" == "update" ]]; then
    update_packages
    exit 0
fi

# --- Step 8: Build package list ---
if [[ "$action" == "remove" ]]; then
    if [[ "$source" == "pacman" ]]; then
        pkg_list=$(pacman -Qq)
    else
        pkg_list=$(paru -Qq)
    fi
else
    if [[ "$source" == "pacman" ]]; then
        pkg_list=$(pacman -Slq | sort -u)
    else
        pkg_list=$(paru -Slq | sort -u)
    fi
fi

# --- Step 9: Fuzzy select packages with preview ---
pkg=$(echo "$pkg_list" | fzf \
    --multi \
    --height=100% \
    --layout=reverse \
    --border \
    --prompt="[$source_display] $action_display: " \
    --preview "if [[ $source == pacman ]]; then pacman -Si {}; else paru -Si {}; fi" \
    --bind "ctrl-p:toggle-preview"
)


[[ -z "$pkg" ]] && { echo "No package selected."; exit 0; }

# --- Step 10: Perform selected action ---
# Convert newline-separated fzf selection into space-separated list
selected_pkgs=$(echo "$pkg" | tr '\n' ' ')

if [[ "$action" == "install" ]]; then
    pkg_install "$selected_pkgs"
elif [[ "$action" == "remove" ]]; then
    pkg_remove "$selected_pkgs"
fi

